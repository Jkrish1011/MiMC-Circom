//SPDX-License-Identifier: MIT

pragma solidity 0.8.17;

contract Hasher {

    uint256 p = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
    uint8 nRounds = 10;
    uint256[10] c = [
        0,
        21888242871839275222246405745257275088548364400416034343698204186575808495611,
        21888242871839275222246405745257275088548364400416034343698204186575808495612,
        21888242871839275222246405745257275088548364400416034343698204186575808495613,
        21888242871839275222246405745257275088548364400416034343698204186575808495614,
        21888242871839275222246405745257275088548364400416034343698204186575808495615,
        21888242871839275222246405745257275088548364400416034343698204186575808495616,
        21888242871839275222246405745257275088548364400416034343698204186575808495617,
        21888242871839275222246405745257275088548364400416034343698204186575808495618,
        21888242871839275222246405745257275088548364400416034343698204186575808495619
    ];

    function MiMC5(uint256 x, uint256 k) public view returns(uint256 h) {
        uint256 lastOutput = x;
        uint256 base;
        uint256 base2;
        uint256 base4;

        for(uint8 i=0; i < nRounds; i++){
            base = addmod(lastOutput, k, p); // lastOutput + k + c[i];
            base = addmod(base, c[i], p);
            
            base2 = addmod(base, base, p);
            base4 = addmod(base2, base2, p);
            lastOutput = mulmod(base4, base, p);
        }
        h = addmod(lastOutput, k, p); //lastOutput + k;
    }
}